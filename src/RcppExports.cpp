// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// predictYCpp
arma::mat predictYCpp(arma::mat H, arma::mat D, arma::vec b);
RcppExport SEXP _FraseR_predictYCpp(SEXP HSEXP, SEXP DSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(predictYCpp(H, D, b));
    return rcpp_result_gen;
END_RCPP
}
// predictMuCpp
arma::mat predictMuCpp(arma::mat y);
RcppExport SEXP _FraseR_predictMuCpp(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(predictMuCpp(y));
    return rcpp_result_gen;
END_RCPP
}
// estLgammaAlpha
arma::vec estLgammaAlpha(arma::vec y, arma::uvec pos, double ar);
RcppExport SEXP _FraseR_estLgammaAlpha(SEXP ySEXP, SEXP posSEXP, SEXP arSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type ar(arSEXP);
    rcpp_result_gen = Rcpp::wrap(estLgammaAlpha(y, pos, ar));
    return rcpp_result_gen;
END_RCPP
}
// estLgammaBeta
arma::vec estLgammaBeta(arma::vec y, arma::uvec pos, double br);
RcppExport SEXP _FraseR_estLgammaBeta(SEXP ySEXP, SEXP posSEXP, SEXP brSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type pos(posSEXP);
    Rcpp::traits::input_parameter< double >::type br(brSEXP);
    rcpp_result_gen = Rcpp::wrap(estLgammaBeta(y, pos, br));
    return rcpp_result_gen;
END_RCPP
}
// truncNLL_db
double truncNLL_db(arma::vec par, arma::mat H, arma::vec k, arma::vec n, double rho, double lambda, double pseudocount);
RcppExport SEXP _FraseR_truncNLL_db(SEXP parSEXP, SEXP HSEXP, SEXP kSEXP, SEXP nSEXP, SEXP rhoSEXP, SEXP lambdaSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(truncNLL_db(par, H, k, n, rho, lambda, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// truncGrad_db
arma::vec truncGrad_db(arma::vec par, arma::mat H, arma::vec k, arma::vec n, double rho, double lambda, double pseudocount);
RcppExport SEXP _FraseR_truncGrad_db(SEXP parSEXP, SEXP HSEXP, SEXP kSEXP, SEXP nSEXP, SEXP rhoSEXP, SEXP lambdaSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(truncGrad_db(par, H, k, n, rho, lambda, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// truncNLL_e
double truncNLL_e(arma::vec par, arma::mat x, arma::mat D, arma::vec b, arma::mat k, arma::mat n, arma::vec rho, double pseudocount);
RcppExport SEXP _FraseR_truncNLL_e(SEXP parSEXP, SEXP xSEXP, SEXP DSEXP, SEXP bSEXP, SEXP kSEXP, SEXP nSEXP, SEXP rhoSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(truncNLL_e(par, x, D, b, k, n, rho, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// truncGrad_e
arma::mat truncGrad_e(arma::vec par, arma::mat x, arma::mat D, arma::vec b, arma::mat k, arma::mat n, arma::vec rho, double pseudocount);
RcppExport SEXP _FraseR_truncGrad_e(SEXP parSEXP, SEXP xSEXP, SEXP DSEXP, SEXP bSEXP, SEXP kSEXP, SEXP nSEXP, SEXP rhoSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(truncGrad_e(par, x, D, b, k, n, rho, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// truncNLL_rho
double truncNLL_rho(double rho, arma::vec yi, arma::vec ki, arma::vec ni, double pseudocount);
RcppExport SEXP _FraseR_truncNLL_rho(SEXP rhoSEXP, SEXP yiSEXP, SEXP kiSEXP, SEXP niSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type yi(yiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ki(kiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ni(niSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(truncNLL_rho(rho, yi, ki, ni, pseudocount));
    return rcpp_result_gen;
END_RCPP
}
// fullNLL
double fullNLL(arma::mat y, arma::mat rho, arma::mat k, arma::mat n, arma::mat D, double lambda, double pseudocount);
RcppExport SEXP _FraseR_fullNLL(SEXP ySEXP, SEXP rhoSEXP, SEXP kSEXP, SEXP nSEXP, SEXP DSEXP, SEXP lambdaSEXP, SEXP pseudocountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type k(kSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    rcpp_result_gen = Rcpp::wrap(fullNLL(y, rho, k, n, D, lambda, pseudocount));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FraseR_predictYCpp", (DL_FUNC) &_FraseR_predictYCpp, 3},
    {"_FraseR_predictMuCpp", (DL_FUNC) &_FraseR_predictMuCpp, 1},
    {"_FraseR_estLgammaAlpha", (DL_FUNC) &_FraseR_estLgammaAlpha, 3},
    {"_FraseR_estLgammaBeta", (DL_FUNC) &_FraseR_estLgammaBeta, 3},
    {"_FraseR_truncNLL_db", (DL_FUNC) &_FraseR_truncNLL_db, 7},
    {"_FraseR_truncGrad_db", (DL_FUNC) &_FraseR_truncGrad_db, 7},
    {"_FraseR_truncNLL_e", (DL_FUNC) &_FraseR_truncNLL_e, 8},
    {"_FraseR_truncGrad_e", (DL_FUNC) &_FraseR_truncGrad_e, 8},
    {"_FraseR_truncNLL_rho", (DL_FUNC) &_FraseR_truncNLL_rho, 5},
    {"_FraseR_fullNLL", (DL_FUNC) &_FraseR_fullNLL, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_FraseR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
