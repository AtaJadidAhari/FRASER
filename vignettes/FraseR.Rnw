%\VignetteIndexEntry{FraseR: Find RAre Splicing Evens in RNA-seq}
%\VignettePackage{FraseR}
%\VignetteEngine{knitr::knitr}

% To compile this document
\if12
    source("./src/r/config.R")
    repackFraseR=FALSE
    repackFraseR=TRUE
    buildVignetteFraseR(repackFraseR)
\fi

\documentclass[11pt]{article}
\usepackage{amsmath}
\usepackage{verbatim}
\newcommand{\fraser}{\textit{FraseR}}

<<knitr, echo=FALSE, results="hide">>=
library("knitr")
opts_chunk$set(
  tidy=FALSE,
  dev="png",
  #fig.show="hide",
  fig.width=4, fig.height=4.5,
  dpi = 300,
  cache=TRUE,
  message=FALSE,
  warning=FALSE)
@


<<style, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@

% <<style-Sweave, eval=TRUE, echo=FALSE, results=tex>>=
% BiocStyle::latex2()
% @

<<loadFraseR, echo=FALSE>>=
library("FraseR")
@

\author{Christian Mertes$^{1}$, Julien Gagneur$^{1}$ \\[1em]
\small{$^{1}$ Technische Universit\"at M\"unchen, Department of Informatics, Garching, Germany}
}

\title{FraseR: Find RAre Splicing Events in RNA-seq data}

\begin{document}

\maketitle

\begin{abstract}

Whole exome sequencing and whole genome Sequencing is already a standard in the field of diagnostics of rare disorders. But due to the lack of biological knowledge and interpretation of the vast of variants RNA-seq is an important complementary tool to assess outliers and detect potentially disease causing splice variants.

\vspace{1em}

\begin{center}
\begin{tabular}{ | l | }
\hline
If you use \fraser{} in published research, please cite:  \\
\\
Mertes C, Gagneur J, \emph{et al.}
\textbf{FraseR: Find RAre Splicing Events in RNA-seq data} \\
\emph{bioRxiv}\\
\hline
\end{tabular}
\end{center}

\end{abstract}

\newpage

\tableofcontents

\newpage

\section{Quick guide to \fraser{}}

To start quickly with \fraser{} just call this 4 functions to get a standard analysis on an example data set from the following publication \cite{FraseR}.

<<quick fraser guide, echo=TRUE>>=
# load FraseR package
library(FraseR)

# create sample annotation and settings
settings <- createTestFraseRSettings()

# run full standard analysis
fds <- FraseR(settings)

# annotate junctions and splice sites
fds <- annotateRanges(fds)

# visualize results
plotSampleResults(fds, "sample1")
@

The result html will be discussed in the corresponding section \ref{sec:Results}

\section{Standard workflow}
The standard workflow for detecting rare abarrent splicing events in RNA-seq data can be divided into five steps.
\begin{enumerate}
    \item Data preparation \ref{sec:DataPreparation}
    \item Counting reads \ref{sec:CountingReads}
    \item Calculate PSI- and Zscore-values \ref{sec:PSI-Zscore-calculation}
    \item Calculate P-values \ref{sec:P-value-calculation}
    \item Visualize results \ref{sec:result-vis}
\end{enumerate}

Step 2-5 is wrapped up in one function \Rfunction{FraseR}, but each step can be called individually and parametrizied. A detailed explanaition of each step is given in the following subsections.


\subsection{Data preparation}
\label{sec:DataPreparation}
To start a RNA-seq data analysis with \fraser{} some preparation steps are needed.
First of all we need a table with basic informations which then can be transformed into a \Rclass{FraseRSettings} object. The minimum of information per sample is an unique sample name, the path to the aligned bam file. Additionally groups can be specified for the P-value calculations later. If a \textbf{NA} is asigned no P-values will be calculated. An example sample table is given within the package:

<<sampleData Table, echo=TRUE>>=
library(data.table)
head(fread(system.file(
    "extdata", "sampleTable.tsv", package="FraseR", mustWork=TRUE
)))
@

The RNA-seq data should be aligned with a splice-aware aligner like STAR\cite{STAR} or GEM\cite{GEM}. To gain better results the samples should be processed with the same protocol and origin from the same tissue.

To gain better results at least 20 samples should be sequenced.

To create a settings object for \fraser{} the constructor \Rfunction{FraseRSettings} should be called with at least a sampleData table. For an example have a look into the \Rfunction{createTestFraseRSettings}. In addition to the sampleData you can specify further parameters.

\begin{enumerate}
    \item The parallel backend (a \Rclass{BiocParallelParam} object)
    \item The read filtering (a \Rclass{ScanBamParam} object)
    \item The name of the statistical method to be used
    \item An output folder for the resulting figures and the cache
    \item If the data is strand specific or not. (Not implemented yet)
\end{enumerate}

The following shows how to create a test setting object. This object will be used throughout the whole vignette.

<<FraseR setting example, echo=TRUE>>=
library(FraseR)
settings <- createTestFraseRSettings()
settings
@

\subsection{Counting reads}
\label{sec:CountingReads}

Counting of the reads are straight forward and is done through the \Rfunction{countRNAData} function. The only required parameter is the FraseRSettings object. First all split reads are extracted from each individuel sample and cached if enabled. Then a dataset wide junction map is created (all visible junctions over all samples). After that for each sample the non-spliced reads at each given donor and acceptor site is counted. The resulting \Rclass{FraseRDataSet} object contains two \Rclass{SummarizedExperiment} objects for each the junctions and the splice sites.

<<counting reads, echo=TRUE>>=
fds <- countRNAData(settings)
fds
@

To understand the parallelizing option will be discussed in the parallel section \ref{sec:parallel}.

\subsection{PSI- and Zscore-value calculation}
\label{sec:PSI-Zscore-calculation}

After counting the user needs to compute the PSI-values and Z-scores for each site. Since this is just a

<<calculate psi/zscore values, echo=TRUE>>=
fds <- calculatePSIValues(fds)
fds <- calculateZScores(fds)
fds
@
\subsection{P-value calculation}
\label{sec:P-value-calculation}


\subsection{Result visualisation}
\label{sec:result-vis}

\section{Acknowledgments}

We thank Daniel Bader and Martin Morgan for input in the development of \fraser{}.

\section{Session Info}

<<sessInfo, eval=TRUE, echo=FALSE, results="asis">>=
toLatex(sessionInfo())
@

<<resetOptions, results="hide", echo=FALSE>>=
options(prompt="> ", continue="+ ")
@

\end{document}
